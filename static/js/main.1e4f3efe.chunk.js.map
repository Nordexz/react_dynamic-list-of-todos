{"version":3,"sources":["types/sortType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","TodoList","todos","activeTodoId","setActiveTodoId","className","map","todo","id","title","completed","isActive","classNames","type","onClick","TodoFilter","setTodos","query","setQuery","setSortType","useEffect","onChange","event","target","value","All","Active","Completed","Object","values","current","toUpperCase","slice","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","activeTodo","useState","user","setUser","isError","setIsError","getActiveUser","a","userId","userFromServer","href","email","name","App","sortType","find","getTodosList","useCallback","promise","VisibleTodos","filter","toLocaleLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e4f3efe.chunk.js","sourcesContent":["export enum SortType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  activeTodoId: number;\n  setActiveTodoId: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  activeTodoId,\n  setActiveTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n          const isActive = activeTodoId === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              key={id}\n              className={classNames({\n                'has-background-info-light': isActive,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  { 'has-text-success': completed },\n                  { 'has-text-danger': !completed },\n                )}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setActiveTodoId(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      { 'fa-eye': !isActive },\n                      { 'fa-eye-slash': isActive },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { SortType } from '../../types/sortType';\n\ninterface Props {\n  todos: Todo[];\n  query: string;\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n  setQuery: React.Dispatch<React.SetStateAction<string>>;\n  setSortType: React.Dispatch<React.SetStateAction<SortType>>;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  todos,\n  setTodos,\n  query,\n  setQuery,\n  setSortType,\n}) => {\n  useEffect(() => {\n    setTodos(todos);\n  }, [query]);\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case SortType.All:\n        setSortType(SortType.All);\n        break;\n\n      case SortType.Active:\n        setSortType(SortType.Active);\n        break;\n\n      case SortType.Completed:\n        setSortType(SortType.Completed);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n          >\n            {Object.values(SortType).map(current => (\n              <option value={current}>\n                {`${current[0].toUpperCase() + current.slice(1)}`}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear\"\n              onClick={() => setQuery('')}\n            />\n          )}\n\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  activeTodo: Todo;\n  setActiveTodoId: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport const TodoModal: React.FC<Props> = ({ activeTodo, setActiveTodoId }) => {\n  const [user, setUser] = useState<User>();\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const getActiveUser = async () => {\n      try {\n        const userFromServer = await getUser(activeTodo.userId);\n\n        setUser(userFromServer);\n      } catch {\n        setIsError(true);\n      }\n    };\n\n    getActiveUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(!user || isError) ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${activeTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close\"\n              onClick={() => setActiveTodoId(0)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {activeTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {activeTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { SortType } from './types/sortType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [sortType, setSortType] = useState(SortType.All);\n\n  const [query, setQuery] = useState('');\n  const [activeTodoId, setActiveTodoId] = useState(0);\n\n  const activeTodo = todos.find(todo => todo.id === activeTodoId);\n\n  const getTodosList = useCallback(async (promise: Promise<Todo[]>) => {\n    try {\n      setTodos(await promise);\n    } catch {\n      setIsError(true);\n    }\n  }, []);\n\n  let VisibleTodos = todos;\n\n  switch (sortType) {\n    case SortType.Active:\n      VisibleTodos = VisibleTodos.filter(todo => !todo.completed);\n      break;\n\n    case SortType.Completed:\n      VisibleTodos = VisibleTodos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  VisibleTodos = VisibleTodos\n    .filter(todo => todo.title.toLocaleLowerCase()\n      .includes(query.toLocaleLowerCase()));\n\n  useEffect(() => {\n    getTodosList(getTodos());\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                todos={todos}\n                setTodos={setTodos}\n                query={query}\n                setQuery={setQuery}\n                setSortType={setSortType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {(!todos.length || isError) ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={VisibleTodos}\n                  activeTodoId={activeTodoId}\n                  setActiveTodoId={setActiveTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {activeTodo && (\n        <TodoModal\n          activeTodo={activeTodo}\n          setActiveTodoId={setActiveTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}